import { collection, getDocs, updateDoc, doc } from 'firebase/firestore';
import { db } from '@/lib/firebase';

/**
 * Fun√ß√£o para corrigir usu√°rios que n√£o t√™m o campo isActive definido
 * Execute uma vez para garantir que todos os usu√°rios tenham o campo isActive
 */
export const fixUsersIsActiveField = async () => {
  console.log('üîÑ [MIGRATION] Iniciando corre√ß√£o do campo isActive...');
  
  try {
    // Buscar todos os usu√°rios
    const usersCollection = collection(db, 'users');
    const snapshot = await getDocs(usersCollection);
    
    let totalUsers = 0;
    let usersFixed = 0;
    let errors = 0;
    
    // Processar cada usu√°rio
    const promises = snapshot.docs.map(async (userDoc) => {
      totalUsers++;
      const userId = userDoc.id;
      const userData = userDoc.data();
      
      console.log(`\nüë§ [MIGRATION] Verificando usu√°rio: ${userData.email || userId}`);
      console.log(`üìä [MIGRATION] Tipo: ${userData.userType}, isActive atual: ${userData.isActive} (${typeof userData.isActive})`);
      
      try {
        // Verificar se isActive n√£o est√° definido ou √© undefined
        if (userData.isActive === undefined || userData.isActive === null) {
          console.log(`üîß [MIGRATION] Corrigindo usu√°rio ${userData.email || userId} - definindo isActive como true`);
          
          const userRef = doc(db, 'users', userId);
          await updateDoc(userRef, {
            isActive: true,
            updatedAt: new Date()
          });
          
          usersFixed++;
          console.log(`‚úÖ [MIGRATION] Usu√°rio ${userData.email || userId} corrigido`);
        } else {
          console.log(`‚úÖ [MIGRATION] Usu√°rio ${userData.email || userId} j√° tem isActive definido: ${userData.isActive}`);
        }
      } catch (error) {
        console.error(`‚ùå [MIGRATION] Erro ao corrigir usu√°rio ${userData.email || userId}:`, error);
        errors++;
      }
    });
    
    // Aguardar todas as atualiza√ß√µes
    await Promise.all(promises);
    
    console.log('\nüìä [MIGRATION] Relat√≥rio final:');
    console.log(`- Total de usu√°rios verificados: ${totalUsers}`);
    console.log(`- Usu√°rios corrigidos: ${usersFixed}`);
    console.log(`- Erros: ${errors}`);
    console.log('‚úÖ [MIGRATION] Corre√ß√£o conclu√≠da!');
    
    return { totalUsers, usersFixed, errors };
    
  } catch (error) {
    console.error('‚ùå [MIGRATION] Erro durante migra√ß√£o:', error);
    throw error;
  }
};

/**
 * Fun√ß√£o para verificar o status atual de todos os usu√°rios (apenas leitura)
 */
export const auditUsersIsActiveField = async () => {
  console.log('üîç [AUDIT] Iniciando auditoria do campo isActive...');
  
  try {
    const usersCollection = collection(db, 'users');
    const snapshot = await getDocs(usersCollection);
    
    const auditResults: any[] = [];
    
    snapshot.docs.forEach((userDoc) => {
      const userData = userDoc.data();
      auditResults.push({
        id: userDoc.id,
        email: userData.email,
        displayName: userData.displayName,
        userType: userData.userType,
        isActive: userData.isActive,
        isActiveType: typeof userData.isActive,
        isOnline: userData.isOnline,
        isOnlineType: typeof userData.isOnline,
        needsFix: userData.isActive === undefined || userData.isActive === null
      });
    });
    
    console.log('üìä [AUDIT] Resultado da auditoria:');
    console.table(auditResults);
    
    const needsFix = auditResults.filter(u => u.needsFix);
    console.log(`\n‚ö†Ô∏è [AUDIT] ${needsFix.length} usu√°rios precisam de corre√ß√£o`);
    
    if (needsFix.length > 0) {
      console.log('üîß [AUDIT] Usu√°rios que precisam de corre√ß√£o:');
      console.table(needsFix);
    }
    
    return auditResults;
    
  } catch (error) {
    console.error('‚ùå [AUDIT] Erro durante auditoria:', error);
    throw error;
  }
};

// Disponibilizar no window para uso no console do navegador
if (typeof window !== 'undefined') {
  (window as any).fixUsersIsActiveField = fixUsersIsActiveField;
  (window as any).auditUsersIsActiveField = auditUsersIsActiveField;
  
  console.log('üõ†Ô∏è [MIGRATION] Fun√ß√µes de migra√ß√£o carregadas:');
  console.log('  - fixUsersIsActiveField() - corrige usu√°rios sem isActive');
  console.log('  - auditUsersIsActiveField() - mostra status atual dos usu√°rios');
}
